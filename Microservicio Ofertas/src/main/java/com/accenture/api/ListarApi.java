/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.accenture.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import com.accenture.model.JsonApiBodyRequest;
import com.accenture.model.JsonApiBodyResponseErrors;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-14T12:25:25.106-05:00")

@Api(value = "listar", description = "the listar API")
public interface ListarApi {

    @ApiOperation(value = "buscar ofertas", nickname = "listarOfertas", notes = "devuelve todas las ofertas", response = JsonApiBodyRequest.class, tags={ "ofertas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ofertas encontradas", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarOfertas();

    @ApiOperation(value = "buscar ofertas", nickname = "listarOfertasActivas", notes = "devuelve todas las ofertas", response = JsonApiBodyRequest.class, tags={ "ofertas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ofertas encontradas", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/activas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarOfertasActivas();

    @ApiOperation(value = "buscar ofertas", nickname = "listarOfertasInactivas", notes = "devuelve todas las ofertas", response = JsonApiBodyRequest.class, tags={ "ofertas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ofertas encontradas", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/inactivas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarOfertasInactivas();


//    @ApiOperation(value = "buscar ofertas", nickname = "listarInegocioGet", notes = "devuelve todas las ofertas relacionadas con el id del negocio", response = JsonApiBodyRequest.class, tags={ "ofertas", })
//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "ofertas encontradas", response = JsonApiBodyRequest.class),
//        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
//    @RequestMapping(value = "/listar/{inegocio}",
//        produces = { "application/json" }, 
//        method = RequestMethod.GET)
//    ResponseEntity<?> listarInegocioGet(@ApiParam(value = "",required=true) @PathVariable("idnegocio") String idnegocio);

    @ApiOperation(value = "Listado de ofertas por negocio", nickname = "listarOfertasbyAdmin", notes = "Listado de negocios por idadmin en la tabla negociso de la base de datos.", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "Negocio no encontrado", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/{idnegocio}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarOfertasbyNegocio(@ApiParam(value = "Id del negocio asociado a la oferta",required=true) @PathVariable("idnegocio") String idnegocio);

    @ApiOperation(value = "Listado de ofertas por negocio", nickname = "listarOfertasbyAdmin", notes = "Listado de negocios por idadmin en la tabla negociso de la base de datos.", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "Negocio no encontrado", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/activas/{idnegocio}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarOfertasActivasbyNegocio(@ApiParam(value = "Id del negocio asociado a la oferta",required=true) @PathVariable("idnegocio") String idnegocio);

    @ApiOperation(value = "Listado de ofertas por negocio", nickname = "listarOfertasbyAdmin", notes = "Listado de negocios por idadmin en la tabla negociso de la base de datos.", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "Negocio no encontrado", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/inactivas/{idnegocio}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarOfertasInactivasbyNegocio(@ApiParam(value = "Id del negocio asociado a la oferta",required=true) @PathVariable("idnegocio") String idnegocio);

    @ApiOperation(value = "Listado de ofertas por tipo", nickname = "listarOfertasbyTipo", notes = "Listado de negocios por idadmin en la tabla negociso de la base de datos.", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "Negocio no encontrado", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/filtro/{tipo}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarOfertasbyTipo(@ApiParam(value = "nombre de la oferta asociado a la oferta",required=true) @PathVariable("tipo") String tipo);

    @ApiOperation(value = "Listado de ofertas por negocio", nickname = "listarOfertasbyNegocioAndTipo", notes = "Listado de negocios por idadmin en la tabla negociso de la base de datos.", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "Negocio no encontrado", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/filtro/{idnegocio}/{tipo}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarOfertasbyNegocioAndTipo(@ApiParam(value = "Id del negocio asociado a la oferta",required=true) @PathVariable("idnegocio") String idnegocio, 
    		@ApiParam(value = "Id del negocio asociado a la oferta",required=true) @PathVariable("tipo") String tipo);

    @ApiOperation(value = "Listado de ofertas activas por negocio y tipo", nickname = "listarOfertasbyNegocioAndTipo", notes = "Listado de negocios por idadmin en la tabla negociso de la base de datos.", response = JsonApiBodyRequest.class, tags={ "negocios", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "Negocio no encontrado", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/filtro/activas/{idnegocio}/{tipo}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarOfertasActivasbyNegocioAndTipo(@ApiParam(value = "Id del negocio asociado a la oferta",required=true) @PathVariable("idnegocio") String idnegocio, 
    		@ApiParam(value = "Id del negocio asociado a la oferta",required=true) @PathVariable("tipo") String tipo);
//
//    @ApiOperation(value = "Listado de ofertas activas por negocio y tipo", nickname = "listarOfertasbyNegocioAndTipo", notes = "Listado de negocios por idadmin en la tabla negociso de la base de datos.", response = JsonApiBodyRequest.class, tags={ "negocios", })
//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "OK", response = JsonApiBodyRequest.class),
//        @ApiResponse(code = 404, message = "Negocio no encontrado", response = JsonApiBodyResponseErrors.class) })
//    @RequestMapping(value = "/listar/filtro/activas/{idnegocio}/{tipo}/{descuento}",
//        produces = { "application/json" }, 
//        method = RequestMethod.GET)
//    ResponseEntity<?> listarOfertasActivasbyNegocioAndTipoAndDescuento(@ApiParam(value = "Id del negocio asociado a la oferta",required=true) @PathVariable("idnegocio") String idnegocio, 
//    		@ApiParam(value = "tipo del negocio",required=true) @PathVariable("tipo") String tipo, @ApiParam(value = "tipo de descuento",required=true) @PathVariable("descuento") String descuento);


}
