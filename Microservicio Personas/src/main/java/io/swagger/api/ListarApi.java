/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.JsonApiBodyRequest;
import io.swagger.model.JsonApiBodyRequest2;
import io.swagger.model.JsonApiBodyRequest3;
import io.swagger.model.JsonApiBodyResponseErrors;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-25T19:32:17.596Z")

@Api(value = "listar", description = "the listar API")
public interface ListarApi {

    @ApiOperation(value = "listar usuarios por estado", nickname = "listarEstadoEstadoGet", notes = "se lista un usuario", response = JsonApiBodyRequest.class, tags={ "persona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Usuarios listados correctamente", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "No encontrado", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/estado",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> listarEstadoEstadoGet(@ApiParam(value = "body",required=true)  @Valid @RequestBody JsonApiBodyRequest2 body);


    @ApiOperation(value = "listar los usuarios", nickname = "listarGet", notes = "se lista todos los usuarios", response = JsonApiBodyRequest.class, tags={ "persona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Usuarios encontrados", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "Persona(s) no encontrada(s)", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> listarGet(@ApiParam(value = "body",required=true)  @Valid @RequestBody JsonApiBodyRequest2 body);

    @ApiOperation(value = "listar un usuario", nickname = "listarIdGet", notes = "se lista un usuario", response = JsonApiBodyRequest.class, tags={ "persona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Persona encontrada", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "Persona no encontrada", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/id",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> listarIdGet(@ApiParam(value = "body",required=true)  @Valid @RequestBody JsonApiBodyRequest2 body);

    @ApiOperation(value = "listar usuarios por roles", nickname = "listarRolRolGet", notes = "se lista un usuario", response = JsonApiBodyRequest.class, tags={ "persona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Usuarios listados correctamente", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "No encontrado", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/rol",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> listarRolRolGet(@ApiParam(value = "body",required=true)  @Valid @RequestBody JsonApiBodyRequest2 body);

    @ApiOperation(value = "iniciar sesión", nickname = "loginPersona", notes = "se inicia sesión", response = JsonApiBodyRequest.class, tags={ "persona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Credenciales correctas", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "Error en el inicio de sesión", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/sesion",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> loginPersona(@ApiParam(value = "body",required=true)  @Valid @RequestBody JsonApiBodyRequest3 body);

}
